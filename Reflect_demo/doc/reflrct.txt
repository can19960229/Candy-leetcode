java-reflect专题


反射：通过对象给字段赋值
java反射存在的意义：
    要剖析一个类，必须先获取到该类的字节码文件对象。要剖析使用的就是CLass类中的方法。所以先要获取到每一个字节码文件对应的Class类型的对象。要想使用反射，首先要获得操作类所对应的Class对象
    在运行状态中，对于任意一个类，都能获取这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取类信息以及动态调用对象内容就称为java语言的反射机制。
    原理是：要使用一个类，就要先把它加载到虚拟机中，生成一个Class对象。这个class对象就保存了这个类的一切信息。反射机制的实现，就是获取这个Class对象，通过Class对象去访问类、对象的元数据以及运行时的数据。
    Java的反射机制：操作的就是这个对象的.class文件，首先加载相应类的字节码（运行eclipse的时候，.class文件的字节码会加载到内存中），随后解剖（反射 reflect）出字节码中的构造函数、方法以及变量（字段），或者说是取出。



    1.Class类有三种获得Class某一个类的字节码对象的方式：
        1. 通过String.getClass方法，获取Class对象
        2. 通过Class.forName("类的全限定名")
        3. 通过类字面常量，即类名.class




    2. 通过Class类中的方法创建对象：
        首先获取Class文件，Class.forName("包名.类名")
        Class文件对象去创建对象，c.newInstance(),其实调用的是该类的无参构造方法

    3. Constructor 构造方法对象
        字节码对象去获取构造器对象，构造器对象去调用对应的方法
                1. Class c = Class.forName("cn.itcast_01.Person");  //生成字节码对象
                2. Constructor con = c.getConstructor();            //获取构造器对象
                3. Object obj = con.newInstance();                  //构造器对象去调用对应的方法

    4. Field       成员变量对象

                1. Class c = Class.forName("cn.itcast_01.Person");  // 获取Class类的字节码对象
                2. Constructor con = c.getConstructor();
                   		Object obj = con.newInstance();             // 通过无参构造器对象创建对象
                3. Field addressField = c.getField("address");      // 获取单个成员变量并使用
                   addressField.set(obj, "香港");                    //给obj对象的address成员变量赋值为香港
                4. //如果是私有的成员变量则取消 Java 语言访问检查
                    setAccessible(true);
    5. Method      成员方法对象

                1. Class c = Class.forName("cn.itcast_01.Person");  // 获取Class类的字节码对象
                2. Constructor con = c.getConstructor();
                        Object obj = con.newInstance();             // 通过无参构造器对象创建对象
                3. Method m1 = c.getMethod("show");
                   		m1.invoke(obj);                             //按照反射的原理去使用Person类中的show()
                4. //如果是私有的方法则取消 Java 语言访问检查
                m1.setAccessible(true);

    Tips:首先获得字节码文件对象，再通过字节码文件对象去获取构造方法对象、成员变量对象、成员方法对象，再通过三个对象去调用对应的方法去实现操作

    好处：没有导包，但是在操作对应类的属性和方法

问题：当正式的开发中不知道Class中的方法和变量，而且代码一直在改动，java文件不存在则就找不到了
解决思路：通过反射运行配置文件的内容
解决方案：1. 需要一个配置文件
         2. 该配置文件的格式：
                属性名 = 属性值
            已知的配置的属性名，但不知道属性值
                className = ???
                methodName = ???
         3. 获取.properties为后缀的配置文件中参数

            Properties prop = new Properties();
            prop.load(new FileReader("classes.properties"));    //加载文件中的数据

            //根据键获取值
            String className = prop.getProperty("className");   //获取属性名
            String methodName = prop.getProperty("methodName"); //获取方法名

            Class c =  Class.forName(className);        // 获取Class类的字节码对象

            Constructor con = c.getConstructor();       // 通过无参构造器对象创建对象
            Object obj = con.newInstance();

            Method m = c.getMethod(methodName);         //获得方法名称
            m.invoke(obj);





  1） 在面向对象的世界里，万事万物皆对象。（java语言中，静态的成员、普通数据类型除外)
   类是不是对象呢?类是(哪个类的对象呢?)谁的对象呢?
   类是对象，类是java.lang.Class类的实例对象
  2）这个对象到底如何表示
  3 )Class.forName("类的全称")
       不仅表示了，类的类类型，还代表了动态加载类
       区分编译、运行：编译时刻加载类是静态加载类、运行时刻加载类是动态加载类
  4)基本的数据类型
      void关键字  都存在类类型
  5)Class类的基本API操作


2.方法的反射
1)如何获取某个方法
    方法的名称和方法的参数列表才能唯一决定某个方法
2)方法反射的操作
   method.invoke(对象，参数列表)
3)为什么要用方法的反射
    why?指定方法名称调用方法
    举个实际应用的案例  ---->通过标准JavaBean的属性名获取其属性值
    BeanUtil类
4)通过Class,Method来认识泛型的本质




3.使用Annotation功能



